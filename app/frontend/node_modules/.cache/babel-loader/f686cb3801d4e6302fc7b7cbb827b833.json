{"ast":null,"code":"var _jsxFileName = \"/home/dci/Desktop/gitHubProjects/fitness/app/frontend/src/components/main/workouts/workout/details/stopwatch/stopwatch.jsx\",\n    _s = $RefreshSig$();\n\nimport Button from 'react-bootstrap/Button';\nimport { useReducer, useRef, useEffect } from 'react';\nimport './stopwatch.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(currentState, newState) {\n  return { ...currentState,\n    ...newState\n  };\n}\n\nfunction Stopwatch() {\n  _s();\n\n  const [{\n    running,\n    timer\n  }, setState] = useReducer(reducer, {\n    running: false,\n    timer: 0\n  });\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    return () => clearInterval(intervalRef.current);\n  }, []);\n\n  function handleRunClick() {\n    if (running) {\n      clearInterval(intervalRef.current);\n    } else {\n      const startTime = Date.now() - timer;\n      intervalRef.current = setInterval(() => {\n        setState({\n          timer: Date.now() - startTime\n        });\n      }, 0);\n    }\n\n    setState({\n      running: !running\n    });\n  }\n\n  function handleClearClick() {\n    clearInterval(intervalRef.current);\n    setState({\n      timer: 0,\n      running: false\n    });\n  }\n\n  const formatTime = timer => {\n    const getSeconds = `0${timer % 60}`.slice(-2);\n    const minutes = `${Math.floor(timer / 60)}`;\n    const getMinutes = `0${minutes % 60}`.slice(-2);\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"watchDiv\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [formatTime(timer), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleRunClick,\n        children: running ? 'Stop' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"warning\",\n        onClick: handleClearClick,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stopwatch, \"LJVIrcEwSSDsG2yefwfnA40WQas=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/home/dci/Desktop/gitHubProjects/fitness/app/frontend/src/components/main/workouts/workout/details/stopwatch/stopwatch.jsx"],"names":["Button","useReducer","useRef","useEffect","reducer","currentState","newState","Stopwatch","running","timer","setState","intervalRef","clearInterval","current","handleRunClick","startTime","Date","now","setInterval","handleClearClick","formatTime","getSeconds","slice","minutes","Math","floor","getMinutes","getHours"],"mappings":"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","sourcesContent":["import Button from 'react-bootstrap/Button'\nimport { useReducer, useRef, useEffect } from 'react';\n\nimport './stopwatch.css';\n\nfunction reducer(currentState, newState) {\n  return { ...currentState, ...newState }\n}\n\nfunction Stopwatch() {\n\n  const [{ running, timer }, setState] = useReducer(reducer, {\n\n    running: false,\n    timer: 0,\n  })\n\n\n  const intervalRef = useRef(null)\n\n  useEffect(() => {\n    return () => clearInterval(intervalRef.current)\n\n  }, [])\n\n  function handleRunClick() {\n\n    if (running) {\n\n      clearInterval(intervalRef.current)\n\n    } else {\n\n      const startTime = Date.now() - timer\n      intervalRef.current = setInterval(() => {\n\n        setState({ timer: Date.now() - startTime })\n\n      }, 0)\n    }\n    setState({ running: !running })\n  }\n\n\n  function handleClearClick() {\n\n    clearInterval(intervalRef.current)\n    setState({ timer: 0, running: false })\n  }\n\n  const formatTime = (timer) => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  return (\n\n    <div className='watchDiv'>\n\n      <div>\n        <label>{formatTime(timer)} </label>\n\n        <Button variant=\"primary\" onClick={handleRunClick} >{running ? 'Stop' : 'Start'}</Button>\n\n        <Button variant=\"warning\" onClick={handleClearClick} >Clear</Button>\n        {/* </div>\n\n      <div> */}\n        \n      </div>\n    </div>\n  )\n}\n\nexport default Stopwatch;"]},"metadata":{},"sourceType":"module"}