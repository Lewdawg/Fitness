{"ast":null,"code":"const winningCombinations = ['0-1-2', '3-4-5', '6-7-8', '0-3-6', '1-4-7', '2-5-8', '0-4-8', '2-4-6'];\n\nfunction isTris(cells) {\n  var choosenCells = [];\n\n  for (var i = cells.length - 1; i >= 0; i = i - 2) {\n    choosenCells.push(cells[i]);\n  }\n\n  for (var a = 0; a < choosenCells.length - 2; a++) {\n    for (var b = a + 1; b < choosenCells.length - 1; b++) {\n      for (var c = b + 1; c < choosenCells.length; c++) {\n        var combination = [choosenCells[a], choosenCells[b], choosenCells[c]].sort().join('-');\n        if (winningCombinations.indexOf(combination) > -1) return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction randomCell(cells) {\n  // Try to occupy the center first.\n  if (cells.indexOf(4) === -1) return 4; // Try to block first player combination\n\n  if (cells.length === 3) {\n    for (var i = 0; i < 9; i++) {\n      // Skip cells already occupied.\n      if (cells.indexOf(i) > -1) continue;\n      var combination = [cells[0], cells[2], i].join('-');\n\n      if (winningCombinations.indexOf(combination) > -1) {\n        return i;\n      }\n    }\n  } // Otherwise choose randomly.l\n\n\n  const randomIndex = Math.floor(Math.random() * 8);\n\n  if (cells.indexOf(randomIndex) === -1) {\n    return randomIndex;\n  } else {\n    return randomCell(cells);\n  }\n}\n\nfunction reducer(currenState, action, dispatch, callback) {\n  var state = Object.assign({}, currenState);\n\n  switch (action.type) {\n    case 'PLAYER_CHOOSES_CELL':\n      {\n        const cellIsFree = state.cells.indexOf(action.index) === -1;\n\n        if (cellIsFree && state.isMyTurn) {\n          state.cells.push(action.index);\n          state.isMyTurn = false;\n          setTimeout(function () {\n            dispatch({\n              type: 'IS_COMPUTER_TURN'\n            });\n          }, 1000);\n        }\n\n        break;\n      }\n\n    case 'IS_COMPUTER_TURN':\n      {\n        const gameOver = state.cells.length === 9;\n\n        if (gameOver || isTris(state.cells)) {\n          callback();\n        } else {\n          state.cells.push(randomCell(state.cells));\n          state.isMyTurn = true; // Check if computer won.\n\n          if (isTris(state.cells)) callback();\n        }\n\n        break;\n      }\n  }\n\n  return state;\n}\n\nmodule.exports = reducer;","map":{"version":3,"sources":["/home/dci/Desktop/gitHubProjects/fitness/app/frontend/node_modules/i-am-not-a-robot/src/ticTacToe/reducer.js"],"names":["winningCombinations","isTris","cells","choosenCells","i","length","push","a","b","c","combination","sort","join","indexOf","randomCell","randomIndex","Math","floor","random","reducer","currenState","action","dispatch","callback","state","Object","assign","type","cellIsFree","index","isMyTurn","setTimeout","gameOver","module","exports"],"mappings":"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","sourcesContent":["const winningCombinations = [\n  '0-1-2',\n  '3-4-5',\n  '6-7-8',\n  '0-3-6',\n  '1-4-7',\n  '2-5-8',\n  '0-4-8',\n  '2-4-6'\n]\n\nfunction isTris (cells) {\n  var choosenCells = []\n\n  for (var i = cells.length - 1; i >= 0; i = i - 2) {\n    choosenCells.push(cells[i])\n  }\n\n  for (var a = 0; a < choosenCells.length - 2; a++) {\n    for (var b = a + 1; b < choosenCells.length - 1; b++) {\n      for (var c = b + 1; c < choosenCells.length; c++) {\n        var combination = [choosenCells[a], choosenCells[b], choosenCells[c]].sort().join('-')\n\n        if (winningCombinations.indexOf(combination) > -1) return true\n      }\n    }\n  }\n\n  return false\n}\n\nfunction randomCell (cells) {\n  // Try to occupy the center first.\n  if (cells.indexOf(4) === -1) return 4\n\n  // Try to block first player combination\n  if (cells.length === 3) {\n    for (var i = 0; i < 9; i++) {\n      // Skip cells already occupied.\n      if (cells.indexOf(i) > -1) continue\n\n      var combination = [cells[0], cells[2], i].join('-')\n\n      if (winningCombinations.indexOf(combination) > -1) {\n        return i\n      }\n    }\n  }\n\n  // Otherwise choose randomly.l\n  const randomIndex = Math.floor(Math.random() * 8)\n\n  if (cells.indexOf(randomIndex) === -1) {\n    return randomIndex\n  } else {\n    return randomCell(cells)\n  }\n}\n\nfunction reducer (currenState, action, dispatch, callback) {\n  var state = Object.assign({}, currenState)\n\n  switch (action.type) {\n    case 'PLAYER_CHOOSES_CELL': {\n      const cellIsFree = state.cells.indexOf(action.index) === -1\n\n      if (cellIsFree && state.isMyTurn) {\n        state.cells.push(action.index)\n        state.isMyTurn = false\n\n        setTimeout(function () {\n          dispatch({\n            type: 'IS_COMPUTER_TURN'\n          })\n        }, 1000)\n      }\n\n      break\n    }\n\n    case 'IS_COMPUTER_TURN': {\n      const gameOver = state.cells.length === 9\n      if (gameOver || isTris(state.cells)) {\n        callback()\n      } else {\n        state.cells.push(randomCell(state.cells))\n        state.isMyTurn = true\n\n        // Check if computer won.\n        if (isTris(state.cells)) callback()\n      }\n\n      break\n    }\n  }\n\n  return state\n}\n\nmodule.exports = reducer\n"]},"metadata":{},"sourceType":"script"}